In 0.2.0
--------
- break and return now work correctly if iterator is implemented in C
- ensure for exceptions; return; block and while forms of break, next and redo
- beginnings of garbage collection
- moved exception catching code round entire bc_run function so that 
  exceptions raised by helper functions (eg bc_find_method) find the correct 
  handler
- calls to private and protected methods now handled correctly 
  (though the actual methods 'private', 'protected' and 'public' only 
  work if passed method names as arguments; no arg form doesn't work)
- Range and Regexp literals
- unless .. end (+ improve if tests)
- calls without args, () or receiver (=NodeVcall) now OK
- tests for methods without bodies
- for .. in .. end
- global variables, except special cases like match vars ($~, $1 etc) and $_
- directory and file restructuring
- compile with -Wall and remove all warnings
- procs: arguments, closures (self, local, block), control flow 
  (control flow not complete yet)
- rebase on Ruby 1.8.0 and ruth 0.10.0
- ampersand arguments: in call + method definitions
- split helpers out from Node compilation code (compile_helpers.rb)
- break can take argument
- until (Mark Wassell)
- class variables (Mark Wassell)
- throw and catch

In 0.1.3
--------
- exceptions: catch exception into local variable
- temp stack is now allocated from same memory as stack frames
- Hash literals, Hash arguments to methods
- classes now work correctly: scope, nested classes, superclasses
- refactor some of bc_runner.c
- raise and rescue across C calls
- simplify compilation of rescue statements - there are now too 
  many gotos, but it's a lot easier to understand!
- compile calls to super

In 0.1.2
--------
- instance variables
- singleton methods
- rest and optional args for methods
- store self in separate slot on call frames
- scatter args for method calls
- not
- bytecode calls to/from C: C yields to bytecode; C callbacks to bytecode
- case statements
- exceptions: raise and rescue (not across C calls yet)

In 0.1.1
--------
- fix to allow arguments to be passed to bytecode methods
- compile method definitions with 'normal' (ie not optional, rest or block) arguments
- correctly compile expressions for value and statements for void
- compile 'if .. else'
- compile Fcall nodes (seem to be call to self)
- compile &&, and, ||, or
- break, next, redo now work for while loops
- multiple assignments
- argument count checks on calls to bytecode methods 
  (doesn't yet take account of optional or rest args)
- multiple assignment from method results
- blocks can be passed to methods and yielded to
- break, next, redo for blocks
- access to self from inside blocks
- access to locals created inside blocks
- return from inside blocks
- simple benchmarking comparison 
  (try eg ruby tests/testByteCodeRuby.rb -bench testIf)
- allocate call frames from a stack rather than the heap
- yield from within a block now works
- rebase on Ruby 1.6.7
