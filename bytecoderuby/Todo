Ruby language support
=====================
- literals
	- integers
	- floats
	- true / false
	- strings
	- arrays
	- hashes
	- ranges
	- regexps
* control flow
	- not
	- and & or
	- if
	- unless
	- while
	- until
	- case
	* range flip-flops
* misc
	- multiple assignment
	* #{} in strings and regexps
	* BEGIN {} & END {}
	* __LINE__, __FILE__
- methods
	- definition (for class + singleton)
	- normal, gather, optional, hash and ampersand args
	- multiple results
- variables
	- local
	- instance
	- class
	- global
* call
	- normal, scatter, hash and ampersand args
	- call to super
	* trap no such method errors
	* test for -2 argc methods
	- test for private, protected
	* method_missing
* blocks
	- pass blocks to bytecode & C functions
	- pass arguments to blocks
	- yield
	- next, break, redo, return
	* retry
	- dynamic local variables
	- for .. in
* classes and constants
	- class defintions	
	* module definitions
	* get and set constants
* exceptions	
	- rescue
	- else after rescue
    	* retry
    	- unwind value stack along with call stack
	- catch exceptions raised in C
	* maintain $! correctly
* ensure
	- return
	- exceptions
	- throw
	- next, break & redo for while
	- next, break & redo for blocks
	* retry for blocks


Ruby library support
====================
* procs
	- closures
		- capture self
		- capture local vars
		- capture block 
	- arguments
	* control flow
		- break
		* return - return or local jump error?
		* retry etc
* bindings, bound and unbound methods
* eval, instance_eval etc
	* variables
	* control: break, return etc
- throw, catch
* set_trace_func
* backtrace
	* file and line number for error messages
* rb_frame_last_func (see rb_num_coerce_bin)
* Module.constants
* security levels
* Class.inherited and similar callbacks
* $~, $& and other regex-related 'globals'
* $_ (or does this belong in language support above?)
* $! and $@
* threads, continuations & signals


Bugs
====
* failing tests (commented out in various test methods)
* various seg faults when running with -bench
* cross-refs between the Bytecode::Writer::*Manager classes are ugly
* no tests yet for singleton method definition (except that it's used frequently)
* rescue and case should share compilation code


Future plans
============
* next release
	* bug-fix break/return from procs etc
	* review other failing tests
	* ensure all tests complete when run with -bench (prob. GC issues)
	* run Ruby code from files
	* Great Language Shootout benchmarks

* next but one
	* eval
	* __LINE__, __FILE__
	* make bytecode implementation more declarative
		* either use VMGen
		* or write Ruby VMGen

* future
	* bytecode dump and load (can use Marshal to dump compiled Writer)
	* self-hosting
	* use Rubicon tests
		* integrate testByteCodeRuby tests into Rubicon
		* patch Rubicon to call ByteCodeRuby
	* update details of the bytecodes
	* document all methods using RDoc
	* optimise - see below

* not currently planned
	* threads, continuations & signals 
		- should be implemented by APR style thread sub-system
		- i'd rather work on optimising the bytecode interpreter
		- too difficult!

- old
	- move to Ruby 1.8.0
	- change compilation options to use -Wall or similar


Possible future optimisations
=============================
- optimise frames
	- allocate locals 'inline' with struct frame
	- allocate frames from a linear stack where possible (eg no captured closures)
* pack all CALL flags into 1 flag word (rather than several as currently)
* new bytecode C_CALL allowing direct call to named C func
* remove NODE indirection for methods - make method hash point direct to
  CodeBlocks
* rescue: avoid gotos - make exceptionless route jumpless
* array literals: avoid arbitrary stack depth when populating - use eg
  ARY_FILL a <1> .. <n> #start #n - a
  to put N stack values (<1> .. <n>) into array A starting at index START.
  Similar for hashes.
* closures: only peel frames off the stack if block references enclosing vars
* inline various interpreter C functions (see Flux tool for inlining C)
* threaded bytecode dispatch (perhaps via VMGen)
* optimise argument handling for calls - introduce bytecodes to pull 
  apart an (argc, argv) pair according to normal, optional, gather args (method
  calls) and normal, gather args (block calls)  
* yield: optimise to not go through an array
* optimise a, b = b, a etc to not go through an intermediate array
* static optimisation of bytecodes
	* eg LD_LOC 1 --> LD_LOC_1 etc (auto-generate from VMGen style decls)
	* introduce eg + bytecode which:
	  - if both args are Integer and Integer#+ isn't overridden adds 'em
	  - if both args are String and String#+ isn't overridden concats 'em
	  - performs full dispatch otherwise
	  - (see what most common method calls are)
	* macro bytecodes like VMGen
* dynamic optimisations
	* method lookup using displays (but lookup cache catches most anyway)
	* bytecode for inline method dispatch on calls (though may be 
	  swamped by bytecode dispatch overhead)
* See also 'Optimizing Indirect Branch Prediction Accuracy in Virtual Machine Interpreters' (Ertl & Gregg) for how to speed up interpreters over and above threaded code.